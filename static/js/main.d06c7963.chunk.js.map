{"version":3,"sources":["components/TopAppBar/index.js","components/BtnToRecord/index.js","components/CardInterview/index.js","constants/questions.js","views/Interview/index.js","views/Layout/index.js","App.js","serviceWorker.js","index.js"],"names":["className","BtnToRecord","props","style","width","maxWidth","position","bottom","onClick","handleRecord","type","recording","CardInterview","title","children","defaultProps","commonQuestions","q","a","r","RecordingAPI","startRecording","e","preventDefault","chunks","mediaRecorder","start","setState","stopRecording","stop","saveVideo","setTimeout","state","cnt","Questions","length","refs","interviewWrapper","scrollIntoView","behavior","block","inline","blob","Blob","videoStream","URL","createObjectURL","audios","concat","navigator","mediaDevices","getUserMedia","audio","video","stream","this","MediaRecorder","ondataavailable","data","size","push","paddingBottom","ref","Array","map","i","key","controls","src","React","Component","TopAppBar","Interview","App","Layout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d06c7963.chunk.js","sourcesContent":["import React from 'react';\n\nexport default () => {\n  return <div className=\" d-flex justify-content-between bg-light p-3\">\n    <div>\n\n      <i className=\"fas fa-angle-left\"></i>\n    </div>\n    <div>\n      在线面试\n    </div>\n    <div>\n      <i className=\"fas fa-ellipsis-h\"></i>\n    </div>\n  </div>\n}\n","import React from 'react'\n\nconst BtnToRecord = (props) => {\n  return (\n    <div style={{ width: '100%', maxWidth: '750px', position: 'fixed', bottom: '10px' }}>\n      <button onClick={props.handleRecord} style={{ width: '98%' }} type=\"button\" className=\"btn btn-light\">\n        {props.recording ?\n          (<div>\n            <span>正在回答</span>\n            < i className=\"fas fa-microphone-alt\" ></i >\n          </div>\n          )\n          : (<div>\n            <span>点击录制</span>\n            < i className=\"fas fa-microphone\" ></i >\n          </div>\n          )}\n      </button>\n    </div >\n  )\n}\n\nexport default BtnToRecord\n","import React from 'react'\nconst CardInterview = (props) => {\n  return (\n    <div className=\"card bg-warning\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">{props.title}</h5>\n      </div>\n      {props.children}\n    </div>\n  )\n}\nCardInterview.defaultProps = {\n  title: '问题内容',\n}\nexport default CardInterview\n\n\n","// q: question 面试的题目\n// a: answer 自己的答案\n// r: reference 面试者回答完问题之后给参考/答案\n\nexport const commonQuestions = [\n  {\n    q: '请简单做一下自我介绍?',\n    a: '',\n    r: ''\n  },\n  {\n    q: '项目中遇到什么难点，你是怎么克服的?',\n    a: '',\n    r: ''\n  },\n  {\n    q: \"面试就到这里了，你有什么想要问我的?\",\n    a: '',\n    r: ''\n  }, {\n    q: \"面试就到这里了，你有什么想要问我的?\",\n    a: '',\n    r: ''\n  }, {\n    q: \"面试就到这里了，你有什么想要问我的?\",\n    a: '',\n    r: ''\n  }, {\n    q: \"面试就到这里了，你有什么想要问我的?\",\n    a: '',\n    r: ''\n  }\n]\n","\nimport React from 'react';\nimport BtnToRecord from 'components/BtnToRecord'\nimport CardInterview from 'components/CardInterview'\nimport { commonQuestions } from 'constants/questions'\n\n\nclass RecordingAPI extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      recording: false,\n      audios: [],\n      chunks: [],\n      cnt: 0,\n      Questions: [...commonQuestions]\n    };\n  }\n\n  async componentDidMount() {\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\n    this.mediaRecorder = new MediaRecorder(stream);\n    this.chunks = []\n    this.setState({ cnt: this.state.cnt + 1 })\n    // listen for data from media recorder\n    this.mediaRecorder.ondataavailable = e => {\n      if (e.data && e.data.size > 0) {\n        this.chunks.push(e.data);\n      }\n\n    };\n  }\n\n  startRecording = (e) => {\n    e.preventDefault();\n    this.chunks = []\n    this.mediaRecorder.start(10);\n    this.setState({ recording: true });\n  }\n\n  stopRecording = (e) => {\n    e.preventDefault();\n    this.mediaRecorder.stop();\n    this.setState({ recording: false });\n    this.saveVideo();\n    setTimeout(() => {\n      this.setState((state) => {\n        let cnt = state.cnt\n        if (state.cnt < this.state.Questions.length) {\n          cnt++\n        }\n        return { cnt }\n      })\n      this.refs.interviewWrapper.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"nearest\" })\n    }, 500)\n  }\n\n  saveVideo = () => {\n    const blob = new Blob(this.chunks, { 'type': 'video/webm' });\n    const videoStream = URL.createObjectURL(blob);\n    const audios = this.state.audios.concat([videoStream]);\n    this.setState({ audios });\n  }\n\n\n  render() {\n    const { recording, audios, cnt, Questions } = this.state;\n\n    return (\n      <div className=\"camera\">\n        <div style={{ paddingBottom: '50px' }} ref=\"interviewWrapper\">\n          {\n            [...Array(cnt)].map((video, i) => (\n              <div className='px-1 py-2' key={`audio_${i}`}>\n                <CardInterview title={Questions[i].q}>\n                  {audios[i] && <video controls style={{ width: '100%' }} src={audios[i]} ></video>}\n                </CardInterview>\n              </div>\n            ))\n          }\n        </div>\n\n        <BtnToRecord recording={recording} handleRecord={recording ? this.stopRecording : this.startRecording} onClick={e => this.startRecording(e)} />\n      </div>\n    );\n  }\n}\nexport default RecordingAPI\n","import React from 'react';\nimport TopAppBar from 'components/TopAppBar'\nimport Interview from 'views/Interview'\nexport default () => {\n\n  return <div>\n    <TopAppBar />\n    <Interview />\n  </div>\n}\n","import React from 'react';\n// import Foo from './views/Foo'\nimport Layout from './views/Layout'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App mobile-wrapper\">\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@fortawesome/fontawesome-free/js/all.min.js'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}